"""
Django settings for tsampi_server project.

Generated by 'django-admin startproject' using Django 1.9.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import logging
logger = logging.getLogger(__name__)


def here(x):
    return os.path.join(os.path.abspath(os.path.dirname(__file__)), x)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'w@F2@3f@bon34gBtw45htnrtwgrdcdRgqfwewfewREG$we42#$%#Revf')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get('DEBUG', 'False'))

ALLOWED_HOSTS = ['*']
STATIC_ROOT = here('../static_root')
STATICFILES_DIRS = [
    here('../static')
]
STATIC_URL = '/static/'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'raven.contrib.django.raven_compat',
    'rest_framework',
    'django_extensions',
    'django_celery_results',
    'cacheback',
    'tsampi',
]
CELERY_RESULT_BACKEND = 'django-cache'


MIDDLEWARE_CLASSES = [
    #'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'django.middleware.cache.FetchFromCacheMiddleware',
]

ROOT_URLCONF = 'tsampi_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tsampi_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('DATABASE_NAME', 'tsampi'),
        'USER': os.environ.get('DATABASE_USER', 'root'),
        'PASSWORD': os.environ.get('DATABASE_PASSWORD', None),
        'HOST': os.environ.get('DATABASE_HOST', 'db'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True



TSAMPI_SANDBOX_EXEC = '/code/tsampi-sandbox'
# This is the path within the docker container
#TSAMPI_HOME = os.path.expanduser('/code/repos/tsampi-0')

# Set to repo you control to have write access

TSAMPI_CHAIN = os.environ.get('TSAMPI_CHAIN', 'git@github.com:readevalprint/tsampi-0.git')
TSAMPI_TIMEOUT = 30
#TSAMPI_PEER_REPOS = ['https://github.com/readevalprint/tsampi-0.git']

# Keys are loded at the top of entrypoint.sh
# TODO: Maybe it should be on demand on every request?
TSAMPI_GPG_FINGERPRINT = os.environ.get('TSAMPI_GPG_FINGERPRINT', None)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100
}

import git
TSAMPI_VERSION = {
    'commit': git.Repo(here('../..')).head.commit.hexsha,
    'api': '0.1.1'
}

BROKER_URL = os.environ.get('BROKER_URL')# TODO: get from env var
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_BACKEND = 'django-cache'

CACHEBACK_TASK_QUEUE = 'celery'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'TIMEOUT': os.getenv('CACHE_TIMEOUT', 5*60),
        'LOCATION': 'cache_table',
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },
        'tsampi.utils': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}

NOTEBOOK_ARGUMENTS = [
    '--ip', '0.0.0.0',
    '--port', '8080',
]

import os
import raven

import os
import raven

raven_dsn = os.getenv('RAVEN_DSN')
if raven_dsn:
    RAVEN_CONFIG = {
        'dsn': raven_dsn,
        'release': git.Repo(here('../..')).head.commit.hexsha,
    }

try:
    from .local_settings import *
except ImportError as e:
    logger.debug('Skipping local_settings: %s', e)
